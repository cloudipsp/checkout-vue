/*
* SASS preserves units in arithmetic operations. For example:
* 12em * 0 = 0em. This function return the unit of a numeric value.
*
* For more examples, see: https://codepen.io/paulgv/pen/XWrqMgQ
*/
@function extract-unit($number) {
  @return $number * 0 + 1;
}

@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / extract-unit($number);
  }

  @return $number;
}

@function single-unit-rem($value, $font-size-base) {
  @if (extract-unit($value) != 1px) {
    @return $value;
  }

  $converted: $value / $font-size-base;

  @return strip-unit($converted) * 1rem;
}

@function multiple-units-rem($values, $font-size-base) {
  $rem-values: ();

  @each $value in $values {
    $rem-values: append($rem-values, single-unit-rem($value, $font-size-base));
  }

  @return $rem-values;
}

@function px-to-rem($px, $font-size-base: 16px) {
  @if type-of($px) == 'number' {
    @return single-unit-rem($px, $font-size-base);
  } @else if type-of($px) == 'list' {
    @return multiple-units-rem($px, $font-size-base);
  } @else {
    @return $px;
  }
}

@function unit($number) {
  @return $number / ($number * 0 + 1);
}

@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    // stylelint-disable-next-line scss/operator-no-newline-after
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(
        str-slice($string, $index + str-length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}

// See https://codepen.io/kevinweber/pen/dXWoRw
@function escape-svg($string) {
  @if str-index($string, 'data:image/svg+xml') {
    @each $char, $encoded in $escaped-characters {
      // Do not escape the url brackets
      @if str-index($string, 'url(') == 1 {
        $string: url('#{str-replace(str-slice($string, 6, -3), $char, $encoded)}');
      } @else {
        $string: str-replace($string, $char, $encoded);
      }
    }
  }

  @return $string;
}

@function fade($name, $amount) {
  $coefficient: unit($amount) / 100;

  $name1: str-replace($name, 'var\(', '');
  $name2: str-replace($name1, '\)', '');
  $h: var(#{$name2}-h);
  $s: var(#{$name2}-s);
  $l: var(#{$name2}-l);

  @return hsla($h, $s, $l, $coefficient);
}

@function lighten($name, $amount) {
  $coefficient: $amount / 2;

  $name1: str-replace($name, 'var\(', '');
  $name2: str-replace($name1, '\)', '');
  $h: var(#{$name2}-h);
  $s: var(#{$name2}-s);
  $l: var(#{$name2}-l);

  @return hsl($h, $s, calc(#{$l} + #{$coefficient}));
}

@function darken($name, $amount) {
  $coefficient: $amount / 2;

  $name1: str-replace($name, 'var\(', '');
  $name2: str-replace($name1, '\)', '');
  $h: var(#{$name2}-h);
  $s: var(#{$name2}-s);
  $l: var(#{$name2}-l);

  @return hsl($h, $s, calc(#{$l} - #{$coefficient}));
}

@function custom($name, $ss, $ll) {
  $sss: $ss / 2;
  $lll: $ll / 2;

  $name1: str-replace($name, 'var\(', '');
  $name2: str-replace($name1, '\)', '');
  $h: var(#{$name2}-h);
  $s: var(#{$name2}-s);
  $l: var(#{$name2}-l);

  @return hsl($h, calc(#{$s} + #{$sss}), calc(#{$l} + #{$lll}));
}
